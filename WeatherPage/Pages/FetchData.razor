@page "/"

@using WeatherPage.Data
@inject WeatherForecastService ForecastService
@inject IJSRuntime runtime

<head>
    <style>
            * {
                color: white;
            }

            body {
                @(bg)
            }

            .CENT {
                text-align: center;
                padding: 3rem 2rem 2rem 3rem 2rem;
                font-family: Bahnschrift;
                font-size: large;
            }
    </style>
</head>

<h1 style="text-align:center">Aktuální počasí</h1>
<p style="text-align:center">Do okýnka napište název města a aplikace vám ukáže aktuální počasí.</p>

<div class="CENT">
    <input style="border-radius: 10px; color: black; " type="text" @bind="CityName" @onkeydown="ValChanged"
           @oninput="@( (e) => { CityName = e.Value as string; } )" />
    @if (forecasts == null)
    {
        <p><em>Načítání...</em></p>
    }
    else
    {
        <br /><br />
        <p>@forecasts.name &nbsp; &nbsp;  @Math.Truncate(forecasts.main.temp - 273.15)°C</p>
        <p>Rychlost větru: @forecasts.wind.speed m/s&nbsp; &nbsp; <img src=@($"http://openweathermap.org/img/wn/{forecasts.weather[0].icon}.png") /> @forecasts.weather[0].description</p>
        <p>Vlhkost: @forecasts.main.humidity % &nbsp; &nbsp; Pocitová teplota: @Math.Truncate(forecasts.main.feels_like - 273.15)°C</p>
        @if (Math.Round(forecasts.main.temp - 273.15, 2) > 20)
        {
            <img src="/resources/hot.png">
        }
        else if (Math.Round(forecasts.main.temp - 273.15, 2) < 0)
        {
            <img src="/resources/freezing.png">
        }

    }
</div>



@code {
    public WeatherForecastModel forecasts;
    string CityName { get; set; }
    public Dictionary<string, string> Prekladstatusu { get; set; }
    public string bg = $"background: linear-gradient(to right, #003973, #e5e5be)";

    protected override async Task OnInitializedAsync()
    => forecasts = await ForecastService.GetForecastAsync("London");


    public async void ValChanged(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            var defforecast = forecasts;
            bg = GetGradient();

            try
            {
                forecasts = await ForecastService.GetForecastAsync(CityName);

                if (forecasts.cod == 404)
                {
                    forecasts = defforecast;
                    throw new Exception(CityName + " neexistuje.");
                }

                StateHasChanged(); //nezmeni se vzhled stranky pokud se nezavola tento pan
            }
            catch (Exception e)
            {
                Error(e.Message);
                forecasts = defforecast;
            }
        }
    }

    private async void Debug(object msg)
    => await runtime.InvokeAsync<Object>("window.Debug", msg.ToString());

    private async void Error(object msg)
    => await runtime.InvokeAsync<Object>("window.ShowError", msg.ToString());


    public string GetGradient()
    {
        Random rng = new Random();

        int r = rng.Next(150, 220);

        int i1 = rng.Next(1, 90);
        int i2 = rng.Next(50, 99);
        string i3 = r.ToString("X");

        string right = "#e55d87";
        string left = "#5fc3e4";

        Debug(forecasts.main.temp);

        Debug(r);
        Debug(r.ToString("X"));

        string defval = $"background: linear-gradient(to right, {right}, {left});";

        /*
        if (Math.Round(forecasts.main.temp - 273.15, 2) < 0)
        {
            right = $"#{i1.ToString()}{i2.ToString()}{i3}";
            left = $"#{i1.ToString()}{i1.ToString()}{i1.ToString()}";
        }
        else if (Math.Round(forecasts.main.temp - 273.15, 2) > 20)
        {
            right = $"#{i3}{i2.ToString()}{i1.ToString()}";
            left = $"#{i1.ToString()}{i1.ToString()}{i1.ToString()}";
        }
        else
        {
            right = $"#{i2.ToString()}{i3}{i2.ToString()}";
            left = $"#{i1.ToString()}{i1.ToString()}{i1.ToString()}";
        }
        */
        right = $"#{255.ToString("X")}{255.ToString("X")}{255.ToString("X")}";
        left = $"#{00}{00}{00}";

        string grad = $"background: linear-gradient(to right, {right}, {left});";
        return grad;
    }
}

